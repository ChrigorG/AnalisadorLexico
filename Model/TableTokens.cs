using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace AnalisadorLexico.Model
{
    class TableTokens
    {
        public Dictionary<string, Tokens> table = new Dictionary<string, Tokens>();

        public static int end = -1;

        public static byte ABSOLUTE = 4;
        public static byte ABSTRACT = 41;
        public static byte AND = 9;
        public static byte ANSICHAR = 123;
        public static byte ANSISTRING = 124;
        public static byte ARRAY = 10;
        public static byte AS = 85;
        public static byte ASM = 86;
        public static byte ASSEMBLER = 42;
        public static byte AUTOMATED = 43;
        public static byte BEGIN = 7;
        public static byte BOOLEAN = 109;
        public static byte BREAK = 44;
        public static byte BYTE = 115;
        public static byte CASE = 11;
        public static byte CDECL = 45;
        public static byte CHAR = 110;
        public static byte CLASS = 87;
        public static byte CONST = 12;
        public static byte CONSTRUCTOR = 88;
        public static byte CONTINUE = 46;
        public static byte CURRENCY = 122;
        public static byte DEFAULT = 47;
        public static byte DEPRECATED = 48;
        public static byte DESTRUCTOR = 89;
        public static byte DISPOSE = 49;
        public static byte DIV = 13;
        public static byte DO = 90;
        public static byte DOUBLE = 120;
        public static byte DOWNTO = 14;
        public static byte ELSE = 15;
        public static byte END = 8;
        public static byte EXIT = 50;
        public static byte EXPORT = 51;
        public static byte EXTENDED = 121;
        public static byte EXTERNAL = 52;
        public static byte FALSE = 91;
        public static byte FAR = 53;
        public static byte FILE = 16;
        public static byte FINALIZATION = 54;
        public static byte FINALIZED = 55;
        public static byte FINALLY = 92;
        public static byte FOR = 17;
        public static byte FORWARD = 56;
        public static byte FUNCTION = 6;
        public static byte GOTO = 18;
        public static byte IF = 19;
        public static byte IMPLEMENTATION = 2;
        public static byte IN = 20;
        public static byte INHERITED = 93;
        public static byte INITIALIZATION = 94;
        public static byte INLINE = 57;
        public static byte INT64 = 114;
        public static byte INTEGER = 107;
        public static byte INTERFACE = 1;
        public static byte INTERRUPT = 58;
        public static byte IS = 95;
        public static byte LABEL = 21;
        public static byte LIBRARY = 59;
        public static byte LONGINT = 113;
        public static byte LONGWORD = 117;
        public static byte MESSAGE = 60;
        public static byte MOD = 22;
        public static byte NEAR = 61;
        public static byte NEW = 62;
        public static byte NIL = 23;
        public static byte NODEFAULT = 63;
        public static byte NOT = 24;
        public static byte OBJECT = 96;
        public static byte OF = 25;
        public static byte OPERATOR = 97;
        public static byte OR = 26;
        public static byte OVERLOAD = 64;
        public static byte OVERRIDE = 65;
        public static byte PACKED = 27;
        public static byte PASCAL = 66;
        public static byte PLATFORM = 67;
        public static byte PRIVATE = 4;
        public static byte PROCEDURE = 28;
        public static byte PROGRAM = 29;
        public static byte PROPERTY = 98;
        public static byte PROTECTED = 5;
        public static byte PUBLIC = 3;
        public static byte PUBLISHED = 68;
        public static byte RAISE = 99;
        public static byte READ = 69;
        public static byte READONLY = 70;
        public static byte REAL = 108;
        public static byte RECORD = 30;
        public static byte REGISTER = 71;
        public static byte REINTRODUCE = 72;
        public static byte REPEAT = 31;
        public static byte REQUIRES = 73;
        public static byte RESIDENT = 74;
        public static byte RESOURCESTRING = 100;
        public static byte SAFECALL = 75;
        public static byte SEALED = 76;
        public static byte SELF = 101;
        public static byte SET = 32;
        public static byte SHL = 102;
        public static byte SHORTINT = 111;
        public static byte SHORTSTRING = 125;
        public static byte SHR = 103;
        public static byte SINGLE = 119;
        public static byte SMALLINT = 112;
        public static byte STDCALL = 77;
        public static byte STRICT = 78;
        public static byte STRING = 104;
        public static byte THEN = 33;
        public static byte THREADVAR = 79;
        public static byte TO = 34;
        public static byte TRUE = 105;
        public static byte TRY = 80;
        public static byte TYPE = 35;
        public static byte UINT64 = 118;
        public static byte UNICODESTRING = 128;
        public static byte UNIT = 0;
        public static byte UNTIL = 36;
        public static byte USES = 81;
        public static byte VAR = 37;
        public static byte VARARGS = 82;
        public static byte VIRTUAL = 83;
        public static byte WHILE = 38;
        public static byte WIDECHAR = 126;
        public static byte WIDESTRING = 127;
        public static byte WITH = 39;
        public static byte WORD = 116;
        public static byte WRITE = 84;
        public static byte XOR = 106;

        public TableTokens()
        {
            table.Add("absolute", new Tokens(ABSOLUTE, "absolute", ++end));
            table.Add("abstract", new Tokens(ABSTRACT, "abstract", ++end));
            table.Add("and", new Tokens(AND, "and", ++end));
            table.Add("ansichar", new Tokens(ANSICHAR, "ansichar", ++end));
            table.Add("ansistring", new Tokens(ANSISTRING, "ansistring", ++end));
            table.Add("array", new Tokens(ARRAY, "array", ++end));
            table.Add("as", new Tokens(AS, "as", ++end));
            table.Add("asm", new Tokens(ASM, "asm", ++end));
            table.Add("assembler", new Tokens(ASSEMBLER, "assembler", ++end));
            table.Add("automated", new Tokens(AUTOMATED, "automated", ++end));
            table.Add("begin", new Tokens(BEGIN, "begin", ++end));
            table.Add("boolean", new Tokens(BOOLEAN, "boolean", ++end));
            table.Add("break", new Tokens(BREAK, "break", ++end));
            table.Add("byte", new Tokens(BYTE, "byte", ++end));
            table.Add("case", new Tokens(CASE, "case", ++end));
            table.Add("cdecl", new Tokens(CDECL, "cdecl", ++end));
            table.Add("char", new Tokens(CHAR, "char", ++end));
            table.Add("class", new Tokens(CLASS, "class", ++end));
            table.Add("const", new Tokens(CONST, "const", ++end));
            table.Add("constructor", new Tokens(CONSTRUCTOR, "constructor", ++end));
            table.Add("continue", new Tokens(CONTINUE, "continue", ++end));
            table.Add("currency", new Tokens(CURRENCY, "currency", ++end));
            table.Add("default", new Tokens(DEFAULT, "default", ++end));
            table.Add("deprecated", new Tokens(DEPRECATED, "deprecated", ++end));
            table.Add("destructor", new Tokens(DESTRUCTOR, "destructor", ++end));
            table.Add("dispose", new Tokens(DISPOSE, "dispose", ++end));
            table.Add("div", new Tokens(DIV, "div", ++end));
            table.Add("do", new Tokens(DO, "do", ++end));
            table.Add("double", new Tokens(DOUBLE, "double", ++end));
            table.Add("downto", new Tokens(DOWNTO, "downto", ++end));
            table.Add("else", new Tokens(ELSE, "else", ++end));
            table.Add("end", new Tokens(END, "end", ++end));
            table.Add("exit", new Tokens(EXIT, "exit", ++end));
            table.Add("export", new Tokens(EXPORT, "export", ++end));
            table.Add("extended", new Tokens(EXTENDED, "extended", ++end));
            table.Add("external", new Tokens(EXTERNAL, "external", ++end));
            table.Add("false", new Tokens(FALSE, "false", ++end));
            table.Add("far", new Tokens(FAR, "far", ++end));
            table.Add("file", new Tokens(FILE, "file", ++end));
            table.Add("finalization", new Tokens(FINALIZATION, "finalization", ++end));
            table.Add("finalized", new Tokens(FINALIZED, "finalized", ++end));
            table.Add("finally", new Tokens(FINALLY, "finally", ++end));
            table.Add("for", new Tokens(FOR, "for", ++end));
            table.Add("forward", new Tokens(FORWARD, "forward", ++end));
            table.Add("function", new Tokens(FUNCTION, "function", ++end));
            table.Add("goto", new Tokens(GOTO, "goto", ++end));
            table.Add("if", new Tokens(IF, "if", ++end));
            table.Add("implementation", new Tokens(IMPLEMENTATION, "implementation", ++end));
            table.Add("in", new Tokens(IN, "in", ++end));
            table.Add("inherited", new Tokens(INHERITED, "inherited", ++end));
            table.Add("initialization", new Tokens(INITIALIZATION, "initialization", ++end));
            table.Add("inline", new Tokens(INLINE, "inline", ++end));
            table.Add("int64", new Tokens(INT64, "int64", ++end));
            table.Add("integer", new Tokens(INTEGER, "integer", ++end));
            table.Add("interface", new Tokens(INTERFACE, "interface", ++end));
            table.Add("interrupt", new Tokens(INTERRUPT, "interrupt", ++end));
            table.Add("is", new Tokens(IS, "is", ++end));
            table.Add("label", new Tokens(LABEL, "label", ++end));
            table.Add("library", new Tokens(LIBRARY, "library", ++end));
            table.Add("longint", new Tokens(LONGINT, "longint", ++end));
            table.Add("longword", new Tokens(LONGWORD, "longword", ++end));
            table.Add("message", new Tokens(MESSAGE, "message", ++end));
            table.Add("mod", new Tokens(MOD, "mod", ++end));
            table.Add("near", new Tokens(NEAR, "near", ++end));
            table.Add("new", new Tokens(NEW, "new", ++end));
            table.Add("nil", new Tokens(NIL, "nil", ++end));
            table.Add("nodefault", new Tokens(NODEFAULT, "nodefault", ++end));
            table.Add("not", new Tokens(NOT, "not", ++end));
            table.Add("object", new Tokens(OBJECT, "object", ++end));
            table.Add("of", new Tokens(OF, "of", ++end));
            table.Add("operator", new Tokens(OPERATOR, "operator", ++end));
            table.Add("or", new Tokens(OR, "or", ++end));
            table.Add("overload", new Tokens(OVERLOAD, "overload", ++end));
            table.Add("override", new Tokens(OVERRIDE, "override", ++end));
            table.Add("packed", new Tokens(PACKED, "packed", ++end));
            table.Add("pascal", new Tokens(PASCAL, "pascal", ++end));
            table.Add("platform", new Tokens(PLATFORM, "platform", ++end));
            table.Add("private", new Tokens(PRIVATE, "private", ++end));
            table.Add("procedure", new Tokens(PROCEDURE, "procedure", ++end));
            table.Add("program", new Tokens(PROGRAM, "program", ++end));
            table.Add("property", new Tokens(PROPERTY, "property", ++end));
            table.Add("protected", new Tokens(PROTECTED, "protected", ++end));
            table.Add("public", new Tokens(PUBLIC, "public", ++end));
            table.Add("published", new Tokens(PUBLISHED, "published", ++end));
            table.Add("raise", new Tokens(RAISE, "raise", ++end));
            table.Add("read", new Tokens(READ, "read", ++end));
            table.Add("readonly", new Tokens(READONLY, "readonly", ++end));
            table.Add("real", new Tokens(REAL, "real", ++end));
            table.Add("record", new Tokens(RECORD, "record", ++end));
            table.Add("register", new Tokens(REGISTER, "register", ++end));
            table.Add("reintroduce", new Tokens(REINTRODUCE, "reintroduce", ++end));
            table.Add("repeat", new Tokens(REPEAT, "repeat", ++end));
            table.Add("requires", new Tokens(REQUIRES, "requires", ++end));
            table.Add("resident", new Tokens(RESIDENT, "resident", ++end));
            table.Add("resourcestring", new Tokens(RESOURCESTRING, "resourcestring", ++end));
            table.Add("safecall", new Tokens(SAFECALL, "safecall", ++end));
            table.Add("sealed", new Tokens(SEALED, "sealed", ++end));
            table.Add("self", new Tokens(SELF, "self", ++end));
            table.Add("set", new Tokens(SET, "set", ++end));
            table.Add("shl", new Tokens(SHL, "shl", ++end));
            table.Add("shortint", new Tokens(SHORTINT, "shortint", ++end));
            table.Add("shortstring", new Tokens(SHORTSTRING, "shortstring", ++end));
            table.Add("shr", new Tokens(SHR, "shr", ++end));
            table.Add("single", new Tokens(SINGLE, "single", ++end));
            table.Add("smallint", new Tokens(SMALLINT, "smallint", ++end));
            table.Add("stdcall", new Tokens(STDCALL, "stdcall", ++end));
            table.Add("strict", new Tokens(STRICT, "strict", ++end));
            table.Add("string", new Tokens(STRING, "string", ++end));
            table.Add("then", new Tokens(THEN, "then", ++end));
            table.Add("threadvar", new Tokens(THREADVAR, "threadvar", ++end));
            table.Add("to", new Tokens(TO, "to", ++end));
            table.Add("true", new Tokens(TRUE, "true", ++end));
            table.Add("try", new Tokens(TRY, "try", ++end));
            table.Add("type", new Tokens(TYPE, "type", ++end));
            table.Add("uint64", new Tokens(UINT64, "uint64", ++end));
            table.Add("unicodestring", new Tokens(UNICODESTRING, "unicodestring", ++end));
            table.Add("unit", new Tokens(UNIT, "unit", ++end));
            table.Add("until", new Tokens(UNTIL, "until", ++end));
            table.Add("uses", new Tokens(USES, "uses", ++end));
            table.Add("var", new Tokens(VAR, "var", ++end));
            table.Add("varargs", new Tokens(VARARGS, "varargs", ++end));
            table.Add("virtual", new Tokens(VIRTUAL, "virtual", ++end));
            table.Add("while", new Tokens(WHILE, "while", ++end));
            table.Add("widechar", new Tokens(WIDECHAR, "widechar", ++end));
            table.Add("widestring", new Tokens(WIDESTRING, "widestring", ++end));
            table.Add("with", new Tokens(WITH, "with", ++end));
            table.Add("write", new Tokens(WRITE, "write", ++end));
            table.Add("xor", new Tokens(XOR, "xor", ++end));
        }
    }
}
